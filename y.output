Grammar

    0 $accept: S_L $end

    1 S_L: S_L S
    2    | S

    3 S: FACT
    4  | RULE

    5 FACT: LITERAL dot

    6 RULE: LITERAL def LITERAL_L dot

    7 LITERAL: atom op TERM_L cp
    8        | ARITH
    9        | COMP
   10        | atom
   11        | variable is OPERAND

   12 LITERAL_L: LITERAL com LITERAL_L
   13          | LITERAL

   14 TERM_L: TERM_L com TERM
   15       | TERM

   16 TERM: ARITH
   17     | FUNCTION
   18     | LIST
   19     | COMP
   20     | atom
   21     | numeral

   22 ARITH: OPERAND plus OPERAND
   23      | OPERAND minus OPERAND
   24      | OPERAND times OPERAND
   25      | OPERAND divby OPERAND
   26      | op ARITH cp

   27 COMP: OPERAND lt OPERAND
   28     | OPERAND lte OPERAND
   29     | OPERAND st OPERAND
   30     | OPERAND ste OPERAND
   31     | OPERAND eq OPERAND
   32     | OPERAND eqeq OPERAND
   33     | OPERAND neq OPERAND
   34     | OPERAND neqeq OPERAND

   35 OPERAND: ARITH
   36        | variable
   37        | numeral

   38 LIST: ob TERM_L vert LIST cb
   39     | ob TERM_L cb
   40     | ob cb
   41     | variable

   42 FUNCTION: atom op TERM_L cp


Terminals, with rules where they appear

$end (0) 0
error (256)
atom (258) 7 10 20 42
variable (259) 11 36 41
numeral (260) 21 37
dot (261) 5 6
def (262) 6
com (263) 12 14
op (264) 7 26 42
cp (265) 7 26 42
ob (266) 38 39 40
cb (267) 38 39 40
vert (268) 38
is (269) 11
lt (270) 27
lte (271) 28
st (272) 29
ste (273) 30
eq (274) 31
eqeq (275) 32
neq (276) 33
neqeq (277) 34
plus (278) 22
minus (279) 23
times (280) 24
divby (281) 25


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
S_L (28)
    on left: 1 2, on right: 0 1
S (29)
    on left: 3 4, on right: 1 2
FACT (30)
    on left: 5, on right: 3
RULE (31)
    on left: 6, on right: 4
LITERAL (32)
    on left: 7 8 9 10 11, on right: 5 6 12 13
LITERAL_L (33)
    on left: 12 13, on right: 6 12
TERM_L (34)
    on left: 14 15, on right: 7 14 38 39 42
TERM (35)
    on left: 16 17 18 19 20 21, on right: 14 15
ARITH (36)
    on left: 22 23 24 25 26, on right: 8 16 26 35
COMP (37)
    on left: 27 28 29 30 31 32 33 34, on right: 9 19
OPERAND (38)
    on left: 35 36 37, on right: 11 22 23 24 25 27 28 29 30 31 32 33
    34
LIST (39)
    on left: 38 39 40 41, on right: 18 38
FUNCTION (40)
    on left: 42, on right: 17


State 0

    0 $accept: . S_L $end

    atom      shift, and go to state 1
    variable  shift, and go to state 2
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    S_L      go to state 5
    S        go to state 6
    FACT     go to state 7
    RULE     go to state 8
    LITERAL  go to state 9
    ARITH    go to state 10
    COMP     go to state 11
    OPERAND  go to state 12


State 1

    7 LITERAL: atom . op TERM_L cp
   10        | atom .

    op  shift, and go to state 13

    $default  reduce using rule 10 (LITERAL)


State 2

   11 LITERAL: variable . is OPERAND
   36 OPERAND: variable .

    is  shift, and go to state 14

    $default  reduce using rule 36 (OPERAND)


State 3

   37 OPERAND: numeral .

    $default  reduce using rule 37 (OPERAND)


State 4

   26 ARITH: op . ARITH cp

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 16
    OPERAND  go to state 17


State 5

    0 $accept: S_L . $end
    1 S_L: S_L . S

    $end      shift, and go to state 18
    atom      shift, and go to state 1
    variable  shift, and go to state 2
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    S        go to state 19
    FACT     go to state 7
    RULE     go to state 8
    LITERAL  go to state 9
    ARITH    go to state 10
    COMP     go to state 11
    OPERAND  go to state 12


State 6

    2 S_L: S .

    $default  reduce using rule 2 (S_L)


State 7

    3 S: FACT .

    $default  reduce using rule 3 (S)


State 8

    4 S: RULE .

    $default  reduce using rule 4 (S)


State 9

    5 FACT: LITERAL . dot
    6 RULE: LITERAL . def LITERAL_L dot

    dot  shift, and go to state 20
    def  shift, and go to state 21


State 10

    8 LITERAL: ARITH .
   35 OPERAND: ARITH .

    dot       reduce using rule 8 (LITERAL)
    def       reduce using rule 8 (LITERAL)
    com       reduce using rule 8 (LITERAL)
    $default  reduce using rule 35 (OPERAND)


State 11

    9 LITERAL: COMP .

    $default  reduce using rule 9 (LITERAL)


State 12

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   27 COMP: OPERAND . lt OPERAND
   28     | OPERAND . lte OPERAND
   29     | OPERAND . st OPERAND
   30     | OPERAND . ste OPERAND
   31     | OPERAND . eq OPERAND
   32     | OPERAND . eqeq OPERAND
   33     | OPERAND . neq OPERAND
   34     | OPERAND . neqeq OPERAND

    lt     shift, and go to state 22
    lte    shift, and go to state 23
    st     shift, and go to state 24
    ste    shift, and go to state 25
    eq     shift, and go to state 26
    eqeq   shift, and go to state 27
    neq    shift, and go to state 28
    neqeq  shift, and go to state 29
    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33


State 13

    7 LITERAL: atom op . TERM_L cp

    atom      shift, and go to state 34
    variable  shift, and go to state 35
    numeral   shift, and go to state 36
    op        shift, and go to state 4
    ob        shift, and go to state 37

    TERM_L    go to state 38
    TERM      go to state 39
    ARITH     go to state 40
    COMP      go to state 41
    OPERAND   go to state 12
    LIST      go to state 42
    FUNCTION  go to state 43


State 14

   11 LITERAL: variable is . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 45


State 15

   36 OPERAND: variable .

    $default  reduce using rule 36 (OPERAND)


State 16

   26 ARITH: op ARITH . cp
   35 OPERAND: ARITH .

    cp  shift, and go to state 46

    $default  reduce using rule 35 (OPERAND)


State 17

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33


State 18

    0 $accept: S_L $end .

    $default  accept


State 19

    1 S_L: S_L S .

    $default  reduce using rule 1 (S_L)


State 20

    5 FACT: LITERAL dot .

    $default  reduce using rule 5 (FACT)


State 21

    6 RULE: LITERAL def . LITERAL_L dot

    atom      shift, and go to state 1
    variable  shift, and go to state 2
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    LITERAL    go to state 47
    LITERAL_L  go to state 48
    ARITH      go to state 10
    COMP       go to state 11
    OPERAND    go to state 12


State 22

   27 COMP: OPERAND lt . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 49


State 23

   28 COMP: OPERAND lte . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 50


State 24

   29 COMP: OPERAND st . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 51


State 25

   30 COMP: OPERAND ste . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 52


State 26

   31 COMP: OPERAND eq . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 53


State 27

   32 COMP: OPERAND eqeq . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 54


State 28

   33 COMP: OPERAND neq . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 55


State 29

   34 COMP: OPERAND neqeq . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 56


State 30

   22 ARITH: OPERAND plus . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 57


State 31

   23 ARITH: OPERAND minus . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 58


State 32

   24 ARITH: OPERAND times . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 59


State 33

   25 ARITH: OPERAND divby . OPERAND

    variable  shift, and go to state 15
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    ARITH    go to state 44
    OPERAND  go to state 60


State 34

   20 TERM: atom .
   42 FUNCTION: atom . op TERM_L cp

    op  shift, and go to state 61

    $default  reduce using rule 20 (TERM)


State 35

   36 OPERAND: variable .
   41 LIST: variable .

    com       reduce using rule 41 (LIST)
    cp        reduce using rule 41 (LIST)
    cb        reduce using rule 41 (LIST)
    vert      reduce using rule 41 (LIST)
    $default  reduce using rule 36 (OPERAND)


State 36

   21 TERM: numeral .
   37 OPERAND: numeral .

    com       reduce using rule 21 (TERM)
    cp        reduce using rule 21 (TERM)
    cb        reduce using rule 21 (TERM)
    vert      reduce using rule 21 (TERM)
    $default  reduce using rule 37 (OPERAND)


State 37

   38 LIST: ob . TERM_L vert LIST cb
   39     | ob . TERM_L cb
   40     | ob . cb

    atom      shift, and go to state 34
    variable  shift, and go to state 35
    numeral   shift, and go to state 36
    op        shift, and go to state 4
    ob        shift, and go to state 37
    cb        shift, and go to state 62

    TERM_L    go to state 63
    TERM      go to state 39
    ARITH     go to state 40
    COMP      go to state 41
    OPERAND   go to state 12
    LIST      go to state 42
    FUNCTION  go to state 43


State 38

    7 LITERAL: atom op TERM_L . cp
   14 TERM_L: TERM_L . com TERM

    com  shift, and go to state 64
    cp   shift, and go to state 65


State 39

   15 TERM_L: TERM .

    $default  reduce using rule 15 (TERM_L)


State 40

   16 TERM: ARITH .
   35 OPERAND: ARITH .

    com       reduce using rule 16 (TERM)
    cp        reduce using rule 16 (TERM)
    cb        reduce using rule 16 (TERM)
    vert      reduce using rule 16 (TERM)
    $default  reduce using rule 35 (OPERAND)


State 41

   19 TERM: COMP .

    $default  reduce using rule 19 (TERM)


State 42

   18 TERM: LIST .

    $default  reduce using rule 18 (TERM)


State 43

   17 TERM: FUNCTION .

    $default  reduce using rule 17 (TERM)


State 44

   35 OPERAND: ARITH .

    $default  reduce using rule 35 (OPERAND)


State 45

   11 LITERAL: variable is OPERAND .
   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 11 (LITERAL)


State 46

   26 ARITH: op ARITH cp .

    $default  reduce using rule 26 (ARITH)


State 47

   12 LITERAL_L: LITERAL . com LITERAL_L
   13          | LITERAL .

    com  shift, and go to state 66

    $default  reduce using rule 13 (LITERAL_L)


State 48

    6 RULE: LITERAL def LITERAL_L . dot

    dot  shift, and go to state 67


State 49

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   27 COMP: OPERAND lt OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 27 (COMP)


State 50

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   28 COMP: OPERAND lte OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 28 (COMP)


State 51

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   29 COMP: OPERAND st OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 29 (COMP)


State 52

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   30 COMP: OPERAND ste OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 30 (COMP)


State 53

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   31 COMP: OPERAND eq OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 31 (COMP)


State 54

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   32 COMP: OPERAND eqeq OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 32 (COMP)


State 55

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   33 COMP: OPERAND neq OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 33 (COMP)


State 56

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   34 COMP: OPERAND neqeq OPERAND .

    plus   shift, and go to state 30
    minus  shift, and go to state 31
    times  shift, and go to state 32
    divby  shift, and go to state 33

    $default  reduce using rule 34 (COMP)


State 57

   22 ARITH: OPERAND . plus OPERAND
   22      | OPERAND plus OPERAND .
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND

    $default  reduce using rule 22 (ARITH)


State 58

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   23      | OPERAND minus OPERAND .
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND

    $default  reduce using rule 23 (ARITH)


State 59

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   24      | OPERAND times OPERAND .
   25      | OPERAND . divby OPERAND

    $default  reduce using rule 24 (ARITH)


State 60

   22 ARITH: OPERAND . plus OPERAND
   23      | OPERAND . minus OPERAND
   24      | OPERAND . times OPERAND
   25      | OPERAND . divby OPERAND
   25      | OPERAND divby OPERAND .

    $default  reduce using rule 25 (ARITH)


State 61

   42 FUNCTION: atom op . TERM_L cp

    atom      shift, and go to state 34
    variable  shift, and go to state 35
    numeral   shift, and go to state 36
    op        shift, and go to state 4
    ob        shift, and go to state 37

    TERM_L    go to state 68
    TERM      go to state 39
    ARITH     go to state 40
    COMP      go to state 41
    OPERAND   go to state 12
    LIST      go to state 42
    FUNCTION  go to state 43


State 62

   40 LIST: ob cb .

    $default  reduce using rule 40 (LIST)


State 63

   14 TERM_L: TERM_L . com TERM
   38 LIST: ob TERM_L . vert LIST cb
   39     | ob TERM_L . cb

    com   shift, and go to state 64
    cb    shift, and go to state 69
    vert  shift, and go to state 70


State 64

   14 TERM_L: TERM_L com . TERM

    atom      shift, and go to state 34
    variable  shift, and go to state 35
    numeral   shift, and go to state 36
    op        shift, and go to state 4
    ob        shift, and go to state 37

    TERM      go to state 71
    ARITH     go to state 40
    COMP      go to state 41
    OPERAND   go to state 12
    LIST      go to state 42
    FUNCTION  go to state 43


State 65

    7 LITERAL: atom op TERM_L cp .

    $default  reduce using rule 7 (LITERAL)


State 66

   12 LITERAL_L: LITERAL com . LITERAL_L

    atom      shift, and go to state 1
    variable  shift, and go to state 2
    numeral   shift, and go to state 3
    op        shift, and go to state 4

    LITERAL    go to state 47
    LITERAL_L  go to state 72
    ARITH      go to state 10
    COMP       go to state 11
    OPERAND    go to state 12


State 67

    6 RULE: LITERAL def LITERAL_L dot .

    $default  reduce using rule 6 (RULE)


State 68

   14 TERM_L: TERM_L . com TERM
   42 FUNCTION: atom op TERM_L . cp

    com  shift, and go to state 64
    cp   shift, and go to state 73


State 69

   39 LIST: ob TERM_L cb .

    $default  reduce using rule 39 (LIST)


State 70

   38 LIST: ob TERM_L vert . LIST cb

    variable  shift, and go to state 74
    ob        shift, and go to state 37

    LIST  go to state 75


State 71

   14 TERM_L: TERM_L com TERM .

    $default  reduce using rule 14 (TERM_L)


State 72

   12 LITERAL_L: LITERAL com LITERAL_L .

    $default  reduce using rule 12 (LITERAL_L)


State 73

   42 FUNCTION: atom op TERM_L cp .

    $default  reduce using rule 42 (FUNCTION)


State 74

   41 LIST: variable .

    $default  reduce using rule 41 (LIST)


State 75

   38 LIST: ob TERM_L vert LIST . cb

    cb  shift, and go to state 76


State 76

   38 LIST: ob TERM_L vert LIST cb .

    $default  reduce using rule 38 (LIST)
